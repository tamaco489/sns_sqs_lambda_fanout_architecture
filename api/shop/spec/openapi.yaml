openapi: 3.0.0
info:
  title: async serverless application shop API
  description: async serverless application shop API
  version: 1.0.0
servers:
  - url: http://localhost:{port}/shop/
    description: dev
    variables:
      port:
        default: '8080'
  - url: https://api.<domain-name>/shop/
    description: stg
security:
  - bearerAuth: []
paths:
  /v1/healthcheck:
    get:
      tags:
        - healthcheck
      summary: ヘルスチェックAPI
      description: APIが正常に動作しているかを確認します。
      operationId: healthcheck
      responses:
        '200':
          description: API is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
      security: []
  /v1/users:
    post:
      tags:
        - v1
        - users
      summary: ユーザの新規登録API
      description: ユーザを新規登録します。
      operationId: createUser
      responses:
        '201':
          description: ユーザの新規登録が成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/me:
    get:
      tags:
        - v1
        - users
      summary: 自身のユーザ情報取得API
      description: 自身のユーザー情報を取得する
      operationId: getMe
      responses:
        '200':
          description: 自身のユーザ情報の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/profiles:
    post:
      tags:
        - v1
        - users/profiles
      summary: プロフィール情報の新規登録API
      description: ユーザのプロフィール情報を登録します。
      operationId: createProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: ユーザのプロフィール登録が成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/profiles/me:
    get:
      tags:
        - v1
        - users/profiles
      summary: 自身のプロフィール情報取得API
      description: 自身のプロフィール情報を取得する
      operationId: getProfileMe
      responses:
        '200':
          description: 自身のプロフィール情報の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/products:
    get:
      tags:
        - v1
        - products
      summary: 商品の一覧情報取得API
      description: 商品情報一覧を取得します。
      operationId: getProducts
      parameters:
        - name: cursor
          in: query
          description: |
            次のページの商品情報一覧を取得するためのカーソル。
            カーソルは商品IDをbase64でエンコードした文字列を指定する。
          required: false
          schema:
            type: string
            example: MjAwMDEwMDE=
            default: ''
        - name: limit
          in: query
          description: |
            取得する商品情報数を指定。
            デフォルトは10。1度に最大20件まで取得可能。
          required: false
          schema:
            type: integer
            format: int32
            example: 10
            default: 10
            minimum: 1
            maximum: 20
      responses:
        '200':
          description: 商品情報一覧の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
  /v1/products/{productID}:
    get:
      tags:
        - v1
        - products
      summary: 商品の詳細情報取得API
      description: 商品IDに合致する商品情報の詳細を取得する
      operationId: getProductByID
      parameters:
        - name: productID
          in: path
          description: |
            商品ID
          required: true
          schema:
            type: integer
            format: int64
            example: 10001001
            minimum: 1
      responses:
        '200':
          description: 商品情報詳細の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductByID'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/payment/customers/{userID}:
    get:
      tags:
        - v1
        - payments/customer
      summary: 外部決済向けサービスのアカウント取得API
      description: 外部決済サービス向け顧客IDを取得します。
      operationId: getCustomerByUserID
      parameters:
        - name: userID
          in: path
          description: ユーザID
          required: true
          schema:
            type: integer
            format: int64
            example: 10001001
            minimum: 1
      responses:
        '200':
          description: 外部決済サービス向け顧客IDの取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerByUserID'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/payment/customers:
    post:
      tags:
        - v1
        - payments/customer
      summary: 外部決済向けサービスのアカウント登録API
      description: 外部決済サービスにアカウント登録を行います。
      operationId: createCustomer
      responses:
        '201':
          description: 外部決済サービスのアカウント登録が成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - v1
        - payments/customer
      summary: 外部決済向けサービスのアカウント削除API
      description: 外部決済サービスにアカウント削除を行います。
      operationId: deleteCustomer
      responses:
        '204':
          description: 外部決済サービスのアカウント削除が成功しました。
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/payments/cards:
    get:
      tags:
        - v1
        - payments/cards
      summary: 登録済みクレジットカードの一覧取得API
      description: 登録されたクレジットカード情報一覧を取得します。
      operationId: getCreditCards
      responses:
        '200':
          description: クレジットカード情報一覧の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCreditCards'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - v1
        - payments/cards
      summary: クレジットカードの新規登録API
      description: |-
        新しいクレジットカードを登録します。
        事前に外部のカード登録APIを実行し、登録後に生成されたカードトークンをバックエンドサーバにリクエストする形式をとる。
      operationId: createCreditCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCreditCard'
      responses:
        '204':
          description: クレジットカードの登録に成功しました。
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - v1
        - payments/cards
      summary: 登録済みクレジットカードの削除API
      description: 登録されたクレジットカードを削除します。
      operationId: deleteCreditCard
      responses:
        '204':
          description: クレジットカードの削除に成功しました。
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/payments/reservations:
    post:
      tags:
        - v1
        - payments/reservations
      summary: 商品の予約API
      description: |
        商品IDと個数を指定して、新しい予約を作成します。
        作成された予約は、後続の注文APIで使用されます。
      operationId: createReservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '201':
          description: 予約の作成に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/payments/charges:
    post:
      tags:
        - v1
        - payments/charges
      summary: 商品の購入API
      description: |-
        新しい支払い（チャージ）を登録します。
        必要に応じて、支払いに関連するトークンや金額をリクエストボディに含めます。
      operationId: createCharge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChargeRequest'
      responses:
        '204':
          description: 商品の購入に成功しました。
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/payments/charges/histories:
    get:
      tags:
        - v1
        - payments/charges
      summary: 購入履歴の一覧取得API
      description: 以前の注文（チャージ）の履歴情報を取得します。
      operationId: getChargeHistories
      parameters:
        - name: offset
          in: query
          description: |
            取得を開始する注文のインデックス。最初のページは0を指定。
            オフセットは0から始め、次のページのデータを取得する際にはページサイズ（`limit`）を加算していきます。
          required: false
          schema:
            type: integer
            example: 0
            default: 0
        - name: limit
          in: query
          description: |
            取得する注文履歴の数を指定。デフォルトは10、最大で20件まで指定可能。
          required: false
          schema:
            type: integer
            format: int32
            example: 10
            default: 10
            minimum: 1
            maximum: 20
      responses:
        '200':
          description: 購入履歴の一覧取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeHistories'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HealthCheck:
      title: HealthCheck
      type: object
      description: HealthCheckのレスポンス
      required:
        - message
      properties:
        message:
          description: メッセージ。通常はok
          type: string
      example:
        message: ok
    CreateUserResponse:
      title: CreateUser
      type: object
      description: ユーザ新規登録APIのレスポンス
      required:
        - user_id
      properties:
        user_id:
          description: user_idを返却します。
          type: integer
          format: int64
      example:
        user_id: 10001001
    Me:
      type: object
      properties:
        user_id:
          description: 登録した自身のユーザーIDを返却
          type: integer
          format: int64
      required:
        - user_id
      example:
        user_id: 10001001
    Name:
      type: object
      required:
        - first_name
        - last_name
        - first_name_roman
        - last_name_roman
      properties:
        first_name:
          type: string
          description: ユーザーの名前
          example: 智
        last_name:
          type: string
          description: ユーザーの姓
          example: 真皿
        first_name_roman:
          type: string
          description: ユーザーの名前 (ローマ字表記)
          example: Satoshi
        last_name_roman:
          type: string
          description: ユーザーの姓 (ローマ字表記)
          example: Masara
    Addresses:
      type: object
      required:
        - region
        - zip_code
        - prefecture
        - city
        - street
        - other
      properties:
        region:
          type: string
          description: 地域
          example: 関東
        zip_code:
          type: string
          pattern: ^\d{3}-\d{4}$
          description: ユーザーの郵便番号（XXX-XXXX形式）
          example: 150-8377
        prefecture:
          type: string
          description: 都道府県
          example: 東京都
        city:
          type: string
          description: 市区町村
          example: 渋谷区
        street:
          type: string
          description: 町域
          example: 宇田川町
        other:
          type: string
          description: その他住所
          example: 15番1号
    Profile:
      type: object
      required:
        - name
        - address
        - birthdate
        - image_url
      properties:
        name:
          description: 姓名に関する情報
          $ref: '#/components/schemas/Name'
        address:
          description: 住所に関する情報
          $ref: '#/components/schemas/Addresses'
        birthdate:
          type: string
          format: date
          description: ユーザーの生年月日（YYYY-MM-DD形式）
          example: '2000-01-01'
        image_url:
          type: string
          description: ユーザーのプロフィール画像のURL
          example: https://example
    Products:
      title: GetProducts
      type: object
      required:
        - products
        - metadata
      properties:
        products:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - category_id
              - category_name
              - description
              - price
              - discount_flag
              - discount_name
              - discount_rate
              - discounted_price
              - stock_quantity
              - vip_only
              - image_url
              - rate
            properties:
              id:
                type: integer
                format: int32
                description: 商品ID
                example: 10001001
              name:
                type: string
                description: 商品名
                example: プレミアムコーヒー
              category_id:
                type: integer
                format: int32
                description: カテゴリID
                example: 10
              category_name:
                type: string
                description: カテゴリ名
                example: 飲料
              description:
                type: string
                description: 商品の説明
                example: 香り高いアラビカ種のコーヒーです。
              price:
                type: number
                format: float
                description: 定価（税込、日本円）
                example: 500
              discount_flag:
                type: boolean
                description: 割引キャンペーン対象か否か
                example: true
              discount_name:
                type: string
                description: 割引キャンペーン名称
                example: 2024年クリスマスキャンペーン
              discount_rate:
                type: integer
                format: int32
                description: 割引率（%）
                example: 20
              discounted_price:
                type: number
                format: float
                description: 割引後の価格（税込、日本円）
                example: 400
              stock_quantity:
                type: integer
                format: int32
                description: 在庫数
                example: 50
              vip_only:
                type: boolean
                description: VIP限定の商品か否か
                example: false
              image_url:
                type: string
                description: 商品イメージのURL
                example: https://example.com/images/10001001/product.jpg
              rate:
                type: integer
                format: uint32
                description: 商品に対するユーザの評価（1〜5の整数）
                minimum: 1
                maximum: 5
                example: 4
            x-go-type-name: GetProducts
        metadata:
          type: object
          required:
            - next_cursor
          properties:
            next_cursor:
              type: string
              description: 次ページへのカーソル
              example: MjAwMDI5OTA=
          x-go-type-name: ProductNextCursor
    ProductByID:
      type: object
      required:
        - id
        - name
        - category_id
        - category_name
        - description
        - price
        - discount_flag
        - discount_name
        - discount_rate
        - discounted_price
        - stock_quantity
        - vip_only
        - image_url
        - rate
      properties:
        id:
          type: integer
          format: int32
          description: 商品ID
          example: 10001001
        name:
          type: string
          description: 商品名
          example: プレミアムコーヒー
        category_id:
          type: integer
          format: int32
          description: カテゴリID
          example: 10
        category_name:
          type: string
          description: カテゴリ名
          example: 飲料
        description:
          type: string
          description: 商品の説明
          example: 香り高いアラビカ種のコーヒーです。
        price:
          type: number
          format: float
          description: 定価（税込、日本円）
          example: 500
        discount_flag:
          type: boolean
          description: 割引キャンペーン対象か否か
          example: true
        discount_name:
          type: string
          description: 割引キャンペーン名称
          example: 2024年クリスマスキャンペーン
        discount_rate:
          type: integer
          format: int32
          description: 割引率（%）
          example: 20
        discounted_price:
          type: number
          format: float
          description: 割引後の価格（税込、日本円）
          example: 400
        stock_quantity:
          type: integer
          format: int32
          description: 在庫数
          example: 50
        vip_only:
          type: boolean
          description: VIP限定の商品か否か
          example: false
        image_url:
          type: string
          description: 商品イメージのURL
          example: https://example.com/images/10001001/product.jpg
        rate:
          type: integer
          format: uint32
          description: 商品に対するユーザの評価（1〜5の整数）
          minimum: 1
          maximum: 5
          example: 4
    CustomerByUserID:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 顧客ID
          example: xyz12345
    CreateCustomerResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 顧客ID
          example: xyz12345
    GetCreditCards:
      title: CreditCardList
      type: array
      items:
        type: object
        required:
          - masked_card_number
          - is_default
        properties:
          masked_card_number:
            type: string
            description: マスキングされたカード番号（***** + 下3桁）
            example: '*****123'
          is_default:
            type: boolean
            description: デフォルトのクレジットカードかどうか
            example: true
        x-go-type-name: CreditCardList
    CreateCreditCard:
      type: object
      required:
        - token
        - is_default
      properties:
        token:
          type: string
          description: |
            フロントエンドで登録済みのカード情報に紐付く一意のトークン。
            セキュアに生成され、カード番号などの生データを含まない形式。
          example: 9f9213b2-9687-6910-d2ec-3a247582be2d
        is_default:
          type: boolean
          description: 登録するカードをデフォルトとして設定するか
          example: true
    ReservationRequest:
      type: array
      description: 商品IDと個数のセット
      items:
        required:
          - product_id
          - quantity
        type: object
        properties:
          product_id:
            type: integer
            description: 予約対象となる商品ID
            example: 10001001
          quantity:
            type: integer
            description: 予約する商品の個数
            example: 2
    ReservationResponse:
      type: object
      description: 予約作成のレスポンスオブジェクト
      required:
        - reservation_id
      properties:
        reservation_id:
          type: string
          description: 作成された予約の一意なID
          example: 9f9213b2-9687-6910-d2ec-3a247582be2d
    CreateChargeRequest:
      type: object
      required:
        - reservation_id
      properties:
        reservation_id:
          type: string
          description: 注文を実行するための予約ID。予約APIで生成された一意のID。
          example: 9f9213b2-9687-6910-d2ec-3a247582be2d
    GetChargeHistoriesProducts:
      title: GetChargeHistoriesProducts
      type: object
      description: 注文IDに紐づく商品のリスト
      required:
        - product_id
        - product_name
        - quantity
        - unit_price
      properties:
        product_id:
          type: string
          description: 商品ID
          example: '12345'
        product_name:
          type: string
          description: 商品名
          example: Sample Product
        quantity:
          type: integer
          description: 商品の数量
          example: 2
        unit_price:
          type: number
          description: 商品1つあたりの価格
          format: float
          example: 1500
    ChargeHistories:
      title: ChargeHistories
      type: object
      description: 注文履歴のレスポンスオブジェクト
      required:
        - metadata
        - histories
      properties:
        metadata:
          type: object
          description: ページネーションに関連するメタデータ
          required:
            - limit
            - offset
            - total_count
            - has_more
          properties:
            limit:
              type: integer
              description: 1ページあたりのアイテム数
              example: 10
            offset:
              type: integer
              description: 現在のページの開始位置
              example: 0
            total_count:
              type: integer
              description: 履歴情報の総件数
              example: 50
            has_more:
              type: boolean
              description: 次のページが存在するかどうか
              example: true
          x-go-type-name: ChargeHistoriesLimitOffset
        histories:
          type: array
          description: 注文履歴のリスト
          items:
            type: object
            required:
              - charge_id
              - charge_amount
              - charge_date
              - products
            properties:
              charge_id:
                type: string
                description: 注文ID
                example: 9f9213b2-9687-6910-d2ec-3a247582be2d
              charge_amount:
                type: number
                description: 請求金額
                format: float
                example: 3000
              charge_date:
                type: string
                description: 請求日時
                format: date-time
                example: '2024-12-24T12:00:00Z'
              products:
                type: array
                description: 注文IDに紐づく商品のリスト
                items:
                  $ref: '#/components/schemas/GetChargeHistoriesProducts'
            x-go-type-name: GetChargeHistories
  responses:
    BadRequest:
      description: Bad Request
    Unauthorized:
      description: Unauthorized
    AlreadyExists:
      description: Already Exists
    InternalServerError:
      description: Internal Server Error
    NotFound:
      description: Not Found
    Forbidden:
      description: Forbidden
